// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/v2015/aoc.proto

package aoc2015

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SolutionService_Day1_FullMethodName = "/proto.v2015.SolutionService/Day1"
)

// SolutionServiceClient is the client API for SolutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolutionServiceClient interface {
	Day1(ctx context.Context, in *SolutionRequest, opts ...grpc.CallOption) (*SolutionResponse, error)
}

type solutionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSolutionServiceClient(cc grpc.ClientConnInterface) SolutionServiceClient {
	return &solutionServiceClient{cc}
}

func (c *solutionServiceClient) Day1(ctx context.Context, in *SolutionRequest, opts ...grpc.CallOption) (*SolutionResponse, error) {
	out := new(SolutionResponse)
	err := c.cc.Invoke(ctx, SolutionService_Day1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SolutionServiceServer is the server API for SolutionService service.
// All implementations should embed UnimplementedSolutionServiceServer
// for forward compatibility
type SolutionServiceServer interface {
	Day1(context.Context, *SolutionRequest) (*SolutionResponse, error)
}

// UnimplementedSolutionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSolutionServiceServer struct {
}

func (UnimplementedSolutionServiceServer) Day1(context.Context, *SolutionRequest) (*SolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Day1 not implemented")
}

// UnsafeSolutionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolutionServiceServer will
// result in compilation errors.
type UnsafeSolutionServiceServer interface {
	mustEmbedUnimplementedSolutionServiceServer()
}

func RegisterSolutionServiceServer(s grpc.ServiceRegistrar, srv SolutionServiceServer) {
	s.RegisterService(&SolutionService_ServiceDesc, srv)
}

func _SolutionService_Day1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolutionServiceServer).Day1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolutionService_Day1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolutionServiceServer).Day1(ctx, req.(*SolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SolutionService_ServiceDesc is the grpc.ServiceDesc for SolutionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SolutionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v2015.SolutionService",
	HandlerType: (*SolutionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Day1",
			Handler:    _SolutionService_Day1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v2015/aoc.proto",
}
